"""
File contains functions used to select relevant samples/records for the objectives.

Author: Dominik Macko
"""

from typing import List, Dict, Tuple, Optional, Union

import pandas as pd

def select_malware_detection(df: pd.DataFrame,
                             cols_to_drop: List[str]=["metadata_euphony_name", "metadata_euphony_type", "benign"]
                            ) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """Selects only relevant records for malware detection."""
    
    maliciousness = ~df["benign"]
    return (
        df.drop(columns=cols_to_drop),
        maliciousness.to_frame("malicious")
    )

def select_adware_detection(df: pd.DataFrame,
                            cols_to_drop: List[str]=["metadata_euphony_name", "metadata_euphony_type", "benign"]
                           ) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """Selects only relevant records for adware detection non-benign samples."""
 
    # remove benign samples
    filtered_df = df[df["benign"] != True]
    return (
        filtered_df.drop(columns=cols_to_drop),
        pd.DataFrame(filtered_df["metadata_euphony_type"].apply(lambda label: label == "adware").values,
                     columns=["adware"])
    )

def get_most_popular_families(families: pd.Series, n: int,
                              to_exclude: List[str]=["UNKNOWN", "BENIGN"]
                             ) -> List[str]:
    """Get most popular families from the given series."""
    
    return families[families.apply(lambda f: f not in to_exclude)].value_counts()[:n].index.tolist()

def get_most_popular_malware_families(df: pd.DataFrame, n: int,
                                      to_exclude: List[str]=["UNKNOWN", "BENIGN"]
                                     ) -> List[str]:
    """Get the most popular malware families from the given dataframe."""
    
    return get_most_popular_families(
        df[df["metadata_euphony_type"] != "adware"]["metadata_euphony_name"],
        n,
        to_exclude
    )

def select_malware_labeling(df: pd.DataFrame,
                            families: List[str],
                            group_rest: bool=True,
                            filter_unknown: bool=True,
                            cols_to_drop: List[str]=["metadata_euphony_name", "metadata_euphony_type", "benign"]
                           ) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """Selects only relevant records for labeling of malware families (excluding adware)."""
    
    filtered_df = df[(~df["benign"]) & (df["metadata_euphony_type"] != "adware")]
    if filter_unknown:
        filtered_df = filtered_df[filtered_df["metadata_euphony_name"] != "UNKNOWN"]
    if group_rest:
        targets = filtered_df["metadata_euphony_name"].apply(
            lambda label: label if label in families else "OTHER")
    else:
        targets = filtered_df[filtered_df["metadata_euphony_name"].isin(families)]["metadata_euphony_name"]
    return (
        filtered_df.drop(columns=cols_to_drop).loc[targets.index],
        pd.DataFrame(
            targets,
            columns=["metadata_euphony_name"]
        )
    )

def get_most_popular_adware_families(df: pd.DataFrame, n: int,
                                      to_exclude: List[str]=["UNKNOWN", "BENIGN"]
                                    ) -> List[str]:
    """Get the most popular adware families from the given dataframe."""
    
    return get_most_popular_families(
        df[df["metadata_euphony_type"] == "adware"]["metadata_euphony_name"],
        n,
        to_exclude
    )

def select_adware_labeling(df: pd.DataFrame,
                           families: List[str],
                           group_rest: bool=True,
                           filter_unknown: bool=True,
                           cols_to_drop: List[str]=["metadata_euphony_name", "metadata_euphony_type", "benign"]
                          ) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """Selects only relevant records for labeling of adware families (excluding adware)."""
    
    filtered_df = df[(~df["benign"]) & (df["metadata_euphony_type"] == "adware")]
    if filter_unknown:
        filtered_df = filtered_df[filtered_df["metadata_euphony_name"] != "UNKNOWN"]
    if group_rest:
        targets = filtered_df["metadata_euphony_name"].apply(
            lambda label: label if label in families else "OTHER")
    else:
        targets = filtered_df[filtered_df["metadata_euphony_name"].isin(families)]["metadata_euphony_name"]
    return (
        filtered_df.drop(columns=cols_to_drop).loc[targets.index],
        pd.DataFrame(
            targets,
            columns=["metadata_euphony_name"]
        )
    )

def get_most_popular_malware_categories(df: pd.DataFrame, n: int,
                                        to_exclude: List[str]=["UNKNOWN", "BENIGN"]
                                       ) -> List[str]:
    """Get the most popular malware categories from the given dataframe."""
    
    return get_most_popular_families(
        df[df["metadata_euphony_type"] != "adware"]["metadata_euphony_type"],
        n,
        to_exclude
    )

def select_malware_category_labeling(df: pd.DataFrame,
                                     types: List[str],
                                     group_rest: bool=True,
                                     filter_unknown: bool=True,
                                     cols_to_drop: List[str]=["metadata_euphony_name", "metadata_euphony_type", "benign"]
                                    ) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """Selects only relevant records for labeling of malware families (excluding adware)."""
    
    filtered_df = df[(~df["benign"]) & (df["metadata_euphony_type"] != "adware")]
    if filter_unknown:
        filtered_df = filtered_df[filtered_df["metadata_euphony_type"] != "UNKNOWN"]
    if group_rest:
        targets = filtered_df["metadata_euphony_type"].apply(
            lambda label: label if label in types else "OTHER")
    else:
        targets = filtered_df[filtered_df["metadata_euphony_type"].isin(types)]["metadata_euphony_type"]
    return (
        filtered_df.drop(columns=cols_to_drop).loc[targets.index],
        targets
    )

def select_adware_versus_benign(df: pd.DataFrame,
                                cols_to_drop: List[str]=["metadata_euphony_name", "metadata_euphony_type", "benign"]
                               ) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """Selects only relevant records for malware detection."""
    
    filtered_df = df[df["metadata_euphony_type"].isin(["BENIGN", "adware"])].copy()
    filtered_df["adware"] = filtered_df["metadata_euphony_type"] == "adware"
    return (
        filtered_df.drop(columns=cols_to_drop).drop(columns=["adware"]),
        filtered_df[["adware"]]
    )

def select_malware_versus_benign(df: pd.DataFrame,
                                 cols_to_drop: List[str]=["metadata_euphony_name", "metadata_euphony_type", "benign"]
                                ) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """Selects only relevant records for malware detection."""
    
    filtered_df = df[df["metadata_euphony_type"] != "adware"].copy()
    filtered_df["malware"] = filtered_df["metadata_euphony_type"] != "BENIGN"
    return (
        filtered_df.drop(columns=cols_to_drop).drop(columns=["malware"]),
        filtered_df[["malware"]]
    )
