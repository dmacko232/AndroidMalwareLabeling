"""
Python cli app that can be used to execute all the notebooks.

Author: Dominik Macko
"""

import sys
import os
from typing import List
import argparse

import papermill as pm

OBJECTIVES = [
    "malware_detection", 
    "adware_detection",
    "malware_labeling",
    "adware_labeling",
    "malware_category_labeling",
    "malware_versus_benign",
    "adware_versus_benign"
]
MODELS = [
    "lgbm",
    "logistic_regression",
    "MLP",
    "naive_bayes"
    "random_forest"
]
PREPARATION_NOTEBOOK_NAME = "data_understanding_preparation.ipynb"

PREPARATION_DIRNAME = "understanding_preparation"
MODELING_DIRNAME = "modeling"
EVALUATION_DIRNAME = "evaluation"



def execute_notebook(path: str) -> None:
    
    pm.execute_notebook(
        path,
        path,
        cwd=os.path.split(path)[0]
    )
    
def execute_preparation_notebook(notebooks_dirpath: str,
                                 preparation_dirname: str,
                                 notebook_name: str
                                ) -> None:
    """Executes the preparation notebook."""
    
    execute_notebook(os.path.join(notebooks_dir, preparation_dirname, notebook_name))

def execute_modeling_notebooks(notebooks_dirpath: str,
                               modeling_dirname: str,
                               objectives: List[str],
                               models: List[str]
                              ) -> None:
    """Executes all the modeling notebooks."""
    
    for objective in objectives:
        for model in models:
            execute_notebook(
                os.path.join(notebooks_dir, modeling_dirname, objective, f"{model}")
            )

def execute_evaluation_notebooks(notebooks_dirpath: str,
                                 evaluation_dirname: str,
                                 objectives: List[str]
                                ) -> None:
    """Executes all the evaluation notebooks."""

    for objective in objectives:
        execute_notebook(
            os.path.join(notebooks_dir, evaluation_dirname, f"{objective}.ipynb")
        )

def main() -> None:
    """Runs the main method"""
    
    parser = argparse.ArgumentParser(
        description="Execute the notebooks."
    )
    parser.add_argument("--notebooks_dirpath",
                        nargs="?",
                        type=str,
                        default="/var/tmp/xmacko1/bachelor_thesis/repos/AndroidMalwareLabeling/notebooks",
                        help="Path to directory with notebooks."
                       )
    parser.add_argument("--no_preparation",
                        default=False,
                        help="Turns off running preparation notebook.",
                        action="store_true"
                       )
    parser.add_argument("--no_modeling",
                        default=False,
                        help="Turns off running modeling notebooks.",
                        action="store_true"
                       )
    parser.add_argument("--no_evaluate",
                        default=False,
                        help="Turns off running of evaluation notebooks.",
                        action="store_true"
                       )
    args = parser.parse_args()
    notebooks_dir = args.notebooks_dirpath
    
    # preparation
    if not args.no_preparation:
        execute_preparation_notebook(notebooks_dir,
                                     PREPARATION_DIRNAME,
                                     PREPARATION_NOTEBOOK_NAME
                                    )
    
    # modeling
    if not args.no_modeling:
        execute_modeling_notebooks(notebooks_dir,
                                   MODELING_DIRNAME,
                                   OBJECTIVES,
                                   MODELS
                                  )
    
    # evaluation
    if not args.no_evaluation:
        execute_evaluation_notebooks(notebooks_dir,
                                     EVALUATION_DIRNAME,
                                     OBJECTIVES
                                    )
    

if __name__ == "__main__":
    main()

